import { Component, OnInit } from '@angular/core';
import { Location } from '@angular/common';
import {
  FormBuilder,
  FormGroup,
  Validators,
  FormGroupDirective,
} from '@angular/forms';
import { ActivatedRoute } from '@angular/router';
import { MatDialog } from '@angular/material/dialog';
import { Clipboard } from '@angular/cdk/clipboard';
import { emptyRuleItem, emptyRuleRecord, emptyTransactionRecord, MatSelectOption, Rule, RuleItem, Transaction } from 'src/app/models';
import { arithmeticOperatorOptions, attributeTypeOptions, attributeOptions, comparativeOperatorOptions, logicalOperatorOptions, operatorTypeOptions } from 'src/app/constants';



@Component({
  selector: 'app-rule-form',
  templateUrl: './rule-form.component.html',
  styleUrls: [
    './rule-form.component.scss',

  ],
})
export class RuleFormComponent implements OnInit {
  formSubmitting: boolean = false;
  ruleForm: FormGroup;
  rule: RuleItem[] = [emptyRuleItem()]
  attributeTypeOptions: MatSelectOption[] = attributeTypeOptions
  operatorTypeOptions: MatSelectOption[] = operatorTypeOptions
  attributeOptions: MatSelectOption[] = attributeOptions
  arithmeticOperatorOptions: MatSelectOption[] = arithmeticOperatorOptions
  comparativeOperatorOptions: MatSelectOption[] = comparativeOperatorOptions
  logicalOperatorOptions: MatSelectOption[] = logicalOperatorOptions

  constructor(
    private location: Location,
    private route: ActivatedRoute,
    private fb: FormBuilder,
    public dialog: MatDialog,
    public clipboard: Clipboard
  ) {
    this.ruleForm = this.setupRuleFormGroup();
    this.rule = this.ruleForm.get('rule')?.value ? this.ruleForm.get('rule')?.value : [emptyRuleItem]
  }

  setupRuleFormGroup = (
    ruleFormRecord: Rule = emptyRuleRecord
  ): FormGroup => {
    return this.fb.group({
      id: [ruleFormRecord?.id],
      title: [ruleFormRecord?.title, Validators.required],
      description: [ruleFormRecord?.description],
      rule: [ruleFormRecord?.rule],
      weight: [ruleFormRecord?.weight],
      autogenerated: [ruleFormRecord?.autogenerated],
      active: [ruleFormRecord?.active]
    });
  };

  getAttributeTypeForIndex(index: number): string {
    return this.rule[index]['type']
  }

  getValueForIndex(index: number): any {
    return this.rule[index]['value']
  }

  onAttributeTypeChange(event: any, index: number) {
    console.log('this.rule from type => ', this.rule)

    this.rule[index]['type'] = event
  }
  
  onAttributeValueChange(event: any, index: number) {
    console.log('this.rule from value => ', this.rule)
    const beforeChangeValue = this.rule[index]['value'].toString();
    console.log()
    this.rule[index]['value'] = event;
    if( this.rule[index]['value'] != '') {
      this.rule.push(emptyRuleItem())
      console.log('this.rule => ',this.rule)
    }
  }

  ngOnInit(): void {

  }


  goBack() {
    this.location.back();
  }


  submitForm(form: FormGroup, formDirective: FormGroupDirective) {
    this.formSubmitting = true;
  }
}